=begin
#Amadeus Travel Innovation Sandbox

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class HotelPropertyResponse
    # The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.
    attr_accessor :property_code

    # The name of this hotel.
    attr_accessor :property_name

    attr_accessor :location

    attr_accessor :address

    # The lowest price of a stay, from the given check in date to the given check out date.
    attr_accessor :total_price

    # The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate.
    attr_accessor :min_daily_rate

    # An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number
    attr_accessor :contacts

    # An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search! 
    attr_accessor :amenities

    # An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn't tell us about them!
    attr_accessor :awards

    # A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only.
    attr_accessor :images

    # Information on currently available rooms at this hotel.
    attr_accessor :rooms

    # Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel
    attr_accessor :more_rooms_at_this_hotel


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'property_code' => :'property_code',
        :'property_name' => :'property_name',
        :'location' => :'location',
        :'address' => :'address',
        :'total_price' => :'total_price',
        :'min_daily_rate' => :'min_daily_rate',
        :'contacts' => :'contacts',
        :'amenities' => :'amenities',
        :'awards' => :'awards',
        :'images' => :'images',
        :'rooms' => :'rooms',
        :'more_rooms_at_this_hotel' => :'more_rooms_at_this_hotel'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'property_code' => :'String',
        :'property_name' => :'String',
        :'location' => :'Geolocation',
        :'address' => :'Address',
        :'total_price' => :'Amount',
        :'min_daily_rate' => :'Amount',
        :'contacts' => :'Array<Contact>',
        :'amenities' => :'Array<Amenity>',
        :'awards' => :'Array<Award>',
        :'images' => :'Array<Image>',
        :'rooms' => :'Array<HotelRoom>',
        :'more_rooms_at_this_hotel' => :'Link'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'property_code')
        self.property_code = attributes[:'property_code']
      end

      if attributes.has_key?(:'property_name')
        self.property_name = attributes[:'property_name']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'total_price')
        self.total_price = attributes[:'total_price']
      end

      if attributes.has_key?(:'min_daily_rate')
        self.min_daily_rate = attributes[:'min_daily_rate']
      end

      if attributes.has_key?(:'contacts')
        if (value = attributes[:'contacts']).is_a?(Array)
          self.contacts = value
        end
      end

      if attributes.has_key?(:'amenities')
        if (value = attributes[:'amenities']).is_a?(Array)
          self.amenities = value
        end
      end

      if attributes.has_key?(:'awards')
        if (value = attributes[:'awards']).is_a?(Array)
          self.awards = value
        end
      end

      if attributes.has_key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.has_key?(:'rooms')
        if (value = attributes[:'rooms']).is_a?(Array)
          self.rooms = value
        end
      end

      if attributes.has_key?(:'more_rooms_at_this_hotel')
        self.more_rooms_at_this_hotel = attributes[:'more_rooms_at_this_hotel']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @property_code.nil?
        invalid_properties.push("invalid value for 'property_code', property_code cannot be nil.")
      end

      if @property_name.nil?
        invalid_properties.push("invalid value for 'property_name', property_name cannot be nil.")
      end

      if @location.nil?
        invalid_properties.push("invalid value for 'location', location cannot be nil.")
      end

      if @total_price.nil?
        invalid_properties.push("invalid value for 'total_price', total_price cannot be nil.")
      end

      if @min_daily_rate.nil?
        invalid_properties.push("invalid value for 'min_daily_rate', min_daily_rate cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @property_code.nil?
      return false if @property_name.nil?
      return false if @location.nil?
      return false if @total_price.nil?
      return false if @min_daily_rate.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          property_code == o.property_code &&
          property_name == o.property_name &&
          location == o.location &&
          address == o.address &&
          total_price == o.total_price &&
          min_daily_rate == o.min_daily_rate &&
          contacts == o.contacts &&
          amenities == o.amenities &&
          awards == o.awards &&
          images == o.images &&
          rooms == o.rooms &&
          more_rooms_at_this_hotel == o.more_rooms_at_this_hotel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [property_code, property_name, location, address, total_price, min_daily_rate, contacts, amenities, awards, images, rooms, more_rooms_at_this_hotel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
