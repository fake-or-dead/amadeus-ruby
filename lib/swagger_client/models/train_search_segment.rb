=begin
#Amadeus Travel Innovation Sandbox

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class TrainSearchSegment
    # The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date-time of the train's departure in the local time zone of the departure station, in the format YYYY-MM-DDTHH:mm.
    attr_accessor :departs_at

    # The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date-time of the train's arrival in the local time zone of the arrival station, in the format YYYY-MM-DDTHH:mm.
    attr_accessor :arrives_at

    # The station object representing the station at which the passenger should board this train in order to complete this part of the itinerary.
    attr_accessor :departure_station

    # The station object representing the station at which the passenger should disembark this train in order to complete this part of the itinerary.
    attr_accessor :arrival_station

    # The name of the train company selling this train journey. This is the name you should see printed on your ticket.
    attr_accessor :marketing_company

    # The name of the train company operating this train journey. This is the name you should see written on the train.
    attr_accessor :operating_company

    # The identifying number of this train service. Usually the marketing company will only operate on train per day with this train number.
    attr_accessor :train_number

    # The type of train that you may expect for this journey. For example&colon; InterCity, Regional...
    attr_accessor :train_type

    # Possible pricing for this train journey.
    attr_accessor :prices


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'departs_at' => :'departs_at',
        :'arrives_at' => :'arrives_at',
        :'departure_station' => :'departure_station',
        :'arrival_station' => :'arrival_station',
        :'marketing_company' => :'marketing_company',
        :'operating_company' => :'operating_company',
        :'train_number' => :'train_number',
        :'train_type' => :'train_type',
        :'prices' => :'prices'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'departs_at' => :'String',
        :'arrives_at' => :'String',
        :'departure_station' => :'Station',
        :'arrival_station' => :'Airport',
        :'marketing_company' => :'String',
        :'operating_company' => :'String',
        :'train_number' => :'String',
        :'train_type' => :'String',
        :'prices' => :'Array<TrainSearchPricing>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'departs_at')
        self.departs_at = attributes[:'departs_at']
      end

      if attributes.has_key?(:'arrives_at')
        self.arrives_at = attributes[:'arrives_at']
      end

      if attributes.has_key?(:'departure_station')
        self.departure_station = attributes[:'departure_station']
      end

      if attributes.has_key?(:'arrival_station')
        self.arrival_station = attributes[:'arrival_station']
      end

      if attributes.has_key?(:'marketing_company')
        self.marketing_company = attributes[:'marketing_company']
      end

      if attributes.has_key?(:'operating_company')
        self.operating_company = attributes[:'operating_company']
      end

      if attributes.has_key?(:'train_number')
        self.train_number = attributes[:'train_number']
      end

      if attributes.has_key?(:'train_type')
        self.train_type = attributes[:'train_type']
      end

      if attributes.has_key?(:'prices')
        if (value = attributes[:'prices']).is_a?(Array)
          self.prices = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @departs_at.nil?
        invalid_properties.push("invalid value for 'departs_at', departs_at cannot be nil.")
      end

      if @arrives_at.nil?
        invalid_properties.push("invalid value for 'arrives_at', arrives_at cannot be nil.")
      end

      if @departure_station.nil?
        invalid_properties.push("invalid value for 'departure_station', departure_station cannot be nil.")
      end

      if @arrival_station.nil?
        invalid_properties.push("invalid value for 'arrival_station', arrival_station cannot be nil.")
      end

      if @marketing_company.nil?
        invalid_properties.push("invalid value for 'marketing_company', marketing_company cannot be nil.")
      end

      if @operating_company.nil?
        invalid_properties.push("invalid value for 'operating_company', operating_company cannot be nil.")
      end

      if @train_number.nil?
        invalid_properties.push("invalid value for 'train_number', train_number cannot be nil.")
      end

      if @prices.nil?
        invalid_properties.push("invalid value for 'prices', prices cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @departs_at.nil?
      return false if @arrives_at.nil?
      return false if @departure_station.nil?
      return false if @arrival_station.nil?
      return false if @marketing_company.nil?
      return false if @operating_company.nil?
      return false if @train_number.nil?
      return false if @prices.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          departs_at == o.departs_at &&
          arrives_at == o.arrives_at &&
          departure_station == o.departure_station &&
          arrival_station == o.arrival_station &&
          marketing_company == o.marketing_company &&
          operating_company == o.operating_company &&
          train_number == o.train_number &&
          train_type == o.train_type &&
          prices == o.prices
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [departs_at, arrives_at, departure_station, arrival_station, marketing_company, operating_company, train_number, train_type, prices].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
