=begin
#Amadeus Travel Innovation Sandbox

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class HotelReservation
    # Uniquely identifies this hotel room reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
    attr_accessor :id

    # Date on which the guest will begin their stay in the hotel, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.
    attr_accessor :check_in

    # Date on which the guest will end their stay in the hotel, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.
    attr_accessor :check_out

    # The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.
    attr_accessor :property_code

    # The name of this hotel.
    attr_accessor :property_name

    # The total price of this stay, from the given check in date to the given check out date.
    attr_accessor :total_price

    # Traveler identifiers to indicate the travelers to whom this hotel room reservation applies. Generally all non-infant room occupants will be marked in this array.
    attr_accessor :traveler_ids

    # Additional details and status of this hotel room reservation.
    attr_accessor :booking_info


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'check_in' => :'check_in',
        :'check_out' => :'check_out',
        :'property_code' => :'property_code',
        :'property_name' => :'property_name',
        :'total_price' => :'total_price',
        :'traveler_ids' => :'traveler_ids',
        :'booking_info' => :'booking_info'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'check_in' => :'Date',
        :'check_out' => :'Date',
        :'property_code' => :'String',
        :'property_name' => :'String',
        :'total_price' => :'Amount',
        :'traveler_ids' => :'Array<String>',
        :'booking_info' => :'HotelReservationBookingInfo'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'check_in')
        self.check_in = attributes[:'check_in']
      end

      if attributes.has_key?(:'check_out')
        self.check_out = attributes[:'check_out']
      end

      if attributes.has_key?(:'property_code')
        self.property_code = attributes[:'property_code']
      end

      if attributes.has_key?(:'property_name')
        self.property_name = attributes[:'property_name']
      end

      if attributes.has_key?(:'total_price')
        self.total_price = attributes[:'total_price']
      end

      if attributes.has_key?(:'traveler_ids')
        if (value = attributes[:'traveler_ids']).is_a?(Array)
          self.traveler_ids = value
        end
      end

      if attributes.has_key?(:'booking_info')
        self.booking_info = attributes[:'booking_info']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @check_in.nil?
        invalid_properties.push("invalid value for 'check_in', check_in cannot be nil.")
      end

      if @check_out.nil?
        invalid_properties.push("invalid value for 'check_out', check_out cannot be nil.")
      end

      if @property_code.nil?
        invalid_properties.push("invalid value for 'property_code', property_code cannot be nil.")
      end

      if @property_name.nil?
        invalid_properties.push("invalid value for 'property_name', property_name cannot be nil.")
      end

      if @traveler_ids.nil?
        invalid_properties.push("invalid value for 'traveler_ids', traveler_ids cannot be nil.")
      end

      if @booking_info.nil?
        invalid_properties.push("invalid value for 'booking_info', booking_info cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @check_in.nil?
      return false if @check_out.nil?
      return false if @property_code.nil?
      return false if @property_name.nil?
      return false if @traveler_ids.nil?
      return false if @booking_info.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          check_in == o.check_in &&
          check_out == o.check_out &&
          property_code == o.property_code &&
          property_name == o.property_name &&
          total_price == o.total_price &&
          traveler_ids == o.traveler_ids &&
          booking_info == o.booking_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, check_in, check_out, property_code, property_name, total_price, traveler_ids, booking_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
